
//
// WJ: Refer to the below headers for specific functions.
//

#include "../CUPDAQ/RawObjs/RawObjs/EventInfo.hh"
#include "../CUPDAQ/RawObjs/RawObjs/FChannelData.hh"
#include "../CUPDAQ/RawObjs/RawObjs/FChannel.hh"

void hist_format1(int i, TH1D* h, int k){
    h->SetLineColor(k);
    h->SetTitle(Form("Event %d: Waveform",i));
    h->GetXaxis()->SetTitle("Sample");
    h->GetYaxis()->SetTitle("ADC counts");
    h->GetXaxis()->SetLabelFont(62);
    h->GetXaxis()->SetTitleFont(62);
    h->GetYaxis()->SetLabelFont(62);
    h->GetYaxis()->SetTitleFont(62);
    h->GetYaxis()->SetRangeUser(809,3286); // for KPS spring
    // (2^12/2.)+-((2^14/2.-2000)*2/2^14*2^12/2.5)
    h->SetLineWidth(2);
};
void hist_format2(int i, TH1D* h, int k){
    h->SetLineColor(k);
    h->SetTitle(Form("Event %d: Waveform",i));
    h->GetXaxis()->SetTitle("Time [ns]");
    h->GetYaxis()->SetTitle("ADC Count");
    h->GetYaxis()->SetRangeUser(0,5000);
};

void waveformV1(int chan=8, bool logOnOff=0){

    // KPS spring ---
    //TFile* inf = new TFile("./test.root.00000","read");
    TFile* inf = new TFile("./test_posi_pol.root.00000","read");
    // KPS spring ---
    
    //TFile* inf = new TFile("./test_HUdetPMT_pol0.root.00000","read");
    //TFile* inf = new TFile("../install/bin/test.root.00000","read");
    
    //TFile* inf = new TFile("../install/bin/_000000.root.00000","read");
    //TFile* inf = new TFile("../install/bin/test_hOption.root.00000","read");
    TTree* t_tree = (TTree*)inf->Get("AbsEvent");
    
    EventInfo* eventinfo = new EventInfo(); 
    FChannelData* fchanneldata = new FChannelData();
    t_tree->SetBranchAddress("EventInfo",&eventinfo);
    t_tree->SetBranchAddress("FChannelData",&fchanneldata);

    int TotalNum = t_tree->GetEntries();
    cout<<" Total events = "<<TotalNum<<endl;
    const int channels = 4; TH1D* h_waveform_test[channels];
    for(int i=0; i<t_tree->GetEntries(); i++){
        t_tree->GetEntry(i);
        if(logOnOff){
            cout<<"++++++++++++++++"<<endl;
            cout<<"  Event = "<<i<<endl;
            cout<<"++++++++++++++++"<<endl;
        }

        // EventInfo
        if(logOnOff){
            cout<<"---- EventInfo ----"<<endl;
            cout<<"TrggerType = "<<eventinfo->GetTriggerType()<<endl;
            cout<<"TriggerNumber = "<<eventinfo->GetTriggerNumber()<<endl;
            cout<<"TriggerTime = "<<eventinfo->GetTriggerTime()<<endl;
            cout<<endl;
        }
       
        // FChannelData
        int nch = fchanneldata->GetN();
        if(logOnOff){
            cout<<"---- FChannelData ----"<<endl;
            cout<<"How many channels = "<<nch<<endl;
            cout<<endl;
        }

        // FChannelData - for each channels
        FChannel* fchannel[(const int)nch];
        int pedestal[nch];
        for(int ich=0; ich<nch; ich++){
            fchannel[ich] = fchanneldata->Get(ich);
            pedestal[ich] = 0;
            pedestal[ich] = fchannel[ich]->GetPedestal();
            if(logOnOff){
                cout<<"---- FChannelData - "<<ich+1<<" channel ----"<<endl;
                cout<<"Pedestal = "<<pedestal[ich]<<endl;
            }

            if(i==chan){
                int ndp = fchannel[ich]->GetSize();
                int fID = fchannel[ich]->GetID();
                h_waveform_test[ich] = new TH1D(Form("mkWaveform_ch%03d", fID), Form("mkWaveform_ch%03d", fID), ndp, 0, ndp);
                for(int j=0; j<ndp ; j++) 
                    h_waveform_test[ich]->SetBinContent(j+1,fchannel[ich]->At(j));

            }
        }
        if(logOnOff) cout<<endl;

    }

    // no error if I make hisgorams before executing the below.
    // subtract the waveform with the pedestal of the 1st channel.
    TH1D* h_waveform = (TH1D*)fchanneldata->Get(0)->GetWaveformHist(0);
    h_waveform->Draw("hist");

    gStyle->SetOptStat(0); 
    gStyle->SetTitleFont(62);
    gStyle->SetTitleX(.5);

    TCanvas* c = new TCanvas("c","c",1000,600);
    c->SetGridx(); c->SetGridy();
    TLegend* leg = new TLegend(0.8,0.8,0.9,0.9);
    leg->SetTextFont(62); leg->SetFillStyle(0);
    leg->SetBorderSize(0);
    for(int k=0; k<1/*channels*/; k++){
        h_waveform_test[k]->Draw("hist same");
        hist_format1(chan, h_waveform_test[k], k+1);
        leg->AddEntry(h_waveform_test[k],Form("Ch %d",k+1),"l");
        leg->Draw("same");
    }

    return;
}
